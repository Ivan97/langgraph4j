{"mappings":"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","sources":["<anon>","src/lg4j-result.js","src/stack.js"],"sourcesContent":["\n      var $parcel$global = globalThis;\n    \nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequire0031\"];\n\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequire0031\"] = parcelRequire;\n}\n\nvar parcelRegister = parcelRequire.register;\n\nvar $hNeh9 = parcelRequire(\"hNeh9\");\n\nvar $800sp = parcelRequire(\"800sp\");\n/**\n * Represents a Last-In, First-Out (LIFO) stack.\n * \n * @template T The type of elements held in the stack.\n */ class $ceb960a0a14a1b97$export$694e0d28c7ffc90c {\n    /**\n     * The array holding the stack items.\n     * @type {Array<T>}\n     */ items;\n    /**\n     * The array holding the stack items.\n     * @param  {Array<T>} items\n     */ constructor(items = []){\n        this.items = items;\n    }\n    /**\n     * Adds an item to the top of the stack.\n     * @param {T} item The item to add.\n     * @returns {number} The new length of the stack.\n     */ push(item) {\n        return this.items.push(item);\n    }\n    /**\n     * Removes and returns the item from the top of the stack.\n     * @returns {T | undefined} The removed item, or undefined if the stack is empty.\n     */ pop() {\n        return this.items.pop();\n    }\n    /**\n     * Returns the item at the top of the stack without removing it.\n     * @returns {T | undefined} The top item, or undefined if the stack is empty.\n     */ peek() {\n        return this.items.at(-1);\n    }\n    /**\n     * Returns a copy of all elements in the stack as an array,\n     * ordered from top (most recent) to bottom (least recent).\n     * This method does not modify the original stack.\n     * @returns {Array<T>} An array containing all elements, with the most recently added element at index 0.\n     */ get elements() {\n        // Create a reversed copy to avoid mutating the internal 'items' array\n        return this.items.toReversed();\n    }\n    /**\n     * Checks if the stack is empty.\n     * @returns {boolean} True if the stack is empty, false otherwise.\n     */ isEmpty() {\n        return this.items.length === 0;\n    }\n    /**\n     * Gets the number of items in the stack.\n     * @returns {number} The size of the stack.\n     */ get size() {\n        return this.items.length;\n    }\n    /**\n     * Clears all items from the stack.\n     */ clear() {\n        this.items = [];\n    }\n}\n\n\n\nvar $8uVid = parcelRequire(\"8uVid\");\nconst $c06cac3eedeb74d1$var$_DBG = (0, $8uVid.debug)({\n    on: true,\n    topic: 'LG4JResult'\n});\nclass $c06cac3eedeb74d1$export$c5542a7edb16317 extends (0, $800sp.LitElement) {\n    static styles = [\n        (0, $hNeh9.default),\n        (0, $800sp.css)`\n  json-viewer {\n    --font-size: .8rem;\n  }`\n    ];\n    static properties = {};\n    /**\n   * @type {Map<string, Stack<ResultData[]>>}\n   */ threadMap = new Map();\n    /** \n   * @type {string|undefined}\n   */ #selectedThread;\n    get selectedTab() {\n        return this.#selectedThread;\n    }\n    set selectedTab(thread) {\n        this.#selectedThread = thread;\n        this.dispatchEvent(new CustomEvent('thread-updated', {\n            detail: thread,\n            bubbles: true,\n            composed: true,\n            cancelable: true\n        }));\n    }\n    constructor(){\n        super();\n    }\n    connectedCallback() {\n        super.connectedCallback();\n        // @ts-ignore\n        this.addEventListener('result', this.#onResult);\n        // @ts-ignore\n        this.addEventListener('init-threads', this.#onInitThreads);\n        // @ts-ignore\n        this.addEventListener('node-updated', this.#onNodeUpdated);\n        // @ts-ignore\n        this.addEventListener('state-updated', this.#onStateUpdated);\n    }\n    disconnectedCallback() {\n        super.disconnectedCallback();\n        // @ts-ignore\n        this.removeEventListener('state-updated', this.#onStateUpdated);\n        // @ts-ignore\n        this.removeEventListener('result', this.#onResult);\n        // @ts-ignore\n        this.removeEventListener('init-threads', this.#onInitThreads);\n        // @ts-ignore\n        this.removeEventListener('node-updated', this.#onNodeUpdated);\n    }\n    /**\n   * Event handler for the 'init threads' event.\n   * \n   * @param {CustomEvent} e - The event object containing the result data.\n   * \n   */ #onInitThreads = (e)=>{\n        const { detail: threads = [] } = e;\n        $c06cac3eedeb74d1$var$_DBG('threads', threads);\n        this.threadMap = new Map(threads.map((/** @type {[string, ResultData[]]} */ [thread, results])=>[\n                thread,\n                new (0, $ceb960a0a14a1b97$export$694e0d28c7ffc90c)(results)\n            ]));\n        if (threads && threads.length > 0) {\n            this.selectedTab = threads[0][0];\n            this.requestUpdate();\n        }\n    };\n    /**\n   * Event handler for the 'result' event.\n   * \n   * @param {CustomEvent} e - The event object containing the result data.\n   * \n   */ #onResult = (e)=>{\n        const [thread, result] = e.detail;\n        $c06cac3eedeb74d1$var$_DBG(\"ON RESULT\", thread, result);\n        if (!this.threadMap.has(thread)) throw new Error(`result doesn't contain a valid thread! ${thread}`);\n        const stack = this.threadMap.get(thread);\n        if (!stack) throw new Error(`thread \"${thread} doesn't contain a valid stack! `);\n        const results = stack.peek();\n        const index = results ? results.push(result) : stack.push([\n            result\n        ]);\n        this.threadMap.set(thread, stack);\n        if (result.next) this.dispatchEvent(new CustomEvent('graph-active', {\n            detail: result.next,\n            bubbles: true,\n            composed: true,\n            cancelable: true\n        }));\n        this.requestUpdate();\n        this.updateComplete.then(()=>{\n            const id = `#json${index - 1}`;\n            // @ts-ignore\n            const elems = this.shadowRoot.querySelectorAll(id);\n            $c06cac3eedeb74d1$var$_DBG(id, elems);\n            for (const elem of elems)// @ts-ignore\n            elem.expandAll();\n        });\n    };\n    /**\n   * Event handler select tab.\n   * \n   * @param {Event} event - The event object.\n   * \n   */ #onSelectTab(event) {\n        // @ts-ignore\n        const { id: id } = event.target;\n        $c06cac3eedeb74d1$var$_DBG(\"onSelectTab\", id);\n        this.selectedTab = id;\n        this.requestUpdate();\n    }\n    // @ts-ignore\n    #onNewTab(event) {\n        $c06cac3eedeb74d1$var$_DBG(\"NEW TAB\", event);\n        const threadId = `Thread-${this.threadMap.size + 1}`;\n        this.threadMap.set(threadId, new (0, $ceb960a0a14a1b97$export$694e0d28c7ffc90c)());\n        this.selectedTab = threadId;\n        this.requestUpdate();\n    }\n    /**\n   * \n   * @param {CustomEvent<ResultData>} e - The event object containing the result data.\n   * \n   */ #onNodeUpdated(e) {\n        $c06cac3eedeb74d1$var$_DBG('onNodeUpdated', e);\n    }\n    /**\n   * \n   * @param {CustomEvent<'start'|'stop'|'interrupted'|'error'>} e \n   */ #onStateUpdated(e) {\n        $c06cac3eedeb74d1$var$_DBG('onStateUpdated', e);\n        if (e.detail === 'stop' && this.selectedTab) {\n            // add new elemnt into history stack\n            const stack = this.threadMap.get(this.selectedTab)?.push([]);\n        }\n    }\n    /** \n   * Renders a result.\n   * @param {ResultData} result - The result data to render.\n   * @returns The template for the result.\n   */ // @ts-ignore\n    #renderResult(result, index) {\n        return (0, $800sp.html)`\n    <div class=\"collapse collapse-arrow bg-base-200\">\n      <input type=\"radio\" name=\"item-${index}\" checked=\"checked\" />\n      <div class=\"collapse-title text-ml font-bold\">${result.node}</div>\n      <div class=\"collapse-content\">\n        <lg4j-node-output>${JSON.stringify(result).trim()}</log4j-node-output>  \n      </div>\n    </div>\n    `;\n    }\n    #renderResults() {\n        if (!this.selectedTab) return (0, $800sp.html)`<div class=\"alert alert-warning\">No Data</div>`;\n        return this.threadMap.get(this.selectedTab)?.elements.filter((results)=>results.length > 0).map((results, index)=>(0, $800sp.html)`\n          <div class=\"collapse collapse-plus bg-neutral-500\">\n            <input type=\"radio\" name=\"execution-${index === 0 ? '0' : '1'}\" checked=\"${index === 0 ? 'checked' : (0, $800sp.nothing)}\" />\n            <div class=\"collapse-title text-ml font-bold\">${index === 0 ? 'Last Execution' : `Execution (${index})`}</div>\n            <div class=\"collapse-content\">\n              <table class=\"table table-pin-rows\">\n                <tbody>\n                  ${results.map((result)=>(0, $800sp.html)`<tr><td>${this.#renderResult(result, index)}</td></tr>`)}\n                </tbody>\n              </table>\n            </div>\n          </div>`);\n    }\n    #renderTabs() {\n        const threads = [\n            ...this.threadMap.keys()\n        ];\n        return (0, $800sp.html)`\n    ${threads.map((t)=>(0, $800sp.html)`<a id=\"${t}\" @click=\"${this.#onSelectTab}\" role=\"tab\" class=\"tab ${this.selectedTab === t ? 'tab-active' : ''}\" >${t}</a>`)}\n    `;\n    }\n    render() {\n        return (0, $800sp.html)`\n      \n      <div class=\"h-full\">\n        <div role=\"tablist\" class=\"tabs tabs-bordered\">\n            ${this.#renderTabs()}\n            <a role=\"tab\" class=\"tab\" @click=\"${this.#onNewTab}\">\n              <svg  xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 20 20\">\n                <circle cx=\"10\" cy=\"10\" r=\"9\" fill=\"none\" stroke=\"white\" stroke-width=\"1.5\"/>\n                <line x1=\"5\" y1=\"10\" x2=\"15\" y2=\"10\" stroke=\"white\" stroke-width=\"1.5\" stroke-linecap=\"round\"/>\n                <line x1=\"10\" y1=\"5\" x2=\"10\" y2=\"15\" stroke=\"white\" stroke-width=\"1.5\" stroke-linecap=\"round\"/>\n              </svg>\n            </a>\n          </div>\n            <div class=\"max-h-[95%] overflow-x-auto bg-slate-500\">\n            ${this.#renderResults()}\n            </div>\n        </div> \n    `;\n    }\n    /** \n   * Renders a result.\n   * @param {ResultData} result - The result data to render.\n   * @returns The template for the result.\n   * @deprecated\n   */ // @ts-ignore\n    #renderResultDeprecated(result, index) {\n        return (0, $800sp.html)`\n      <div class=\"collapse collapse-arrow bg-base-200\">\n        <input type=\"radio\" name=\"item-1\" checked=\"checked\" />\n        <div class=\"collapse-title text-ml font-bold\">${result.node}</div>\n        <div class=\"collapse-content\">\n        ${Object.entries(result.// @ts-ignore\n        state).map(([key, value])=>(0, $800sp.html)`\n            <div>\n                <h4 class=\"italic\">${key}</h4>\n                <p class=\"my-3\">\n                  <json-viewer id=\"json${index}\">\n                    ${JSON.stringify(value)}\n                  </json-viewer>\n                </p>\n              </div>\n          `)}\n        </div>\n      </div>\n      `;\n    }\n    // @deprecated\n    // @ts-ignore\n    #renderResultWithCard(result, index) {\n        return (0, $800sp.html)`\n    <div class=\"card bg-neutral text-neutral-content\">\n    <div class=\"card-body\">\n      <h2 class=\"card-title\">${result.node}</h2>\n      <div class=\"collapse collapse-arrow bg-base-200\">\n        <input type=\"radio\" name=\"item-1\" checked=\"checked\" />\n        <div class=\"collapse-content\">\n        ${Object.entries(result.state).map(([key, value])=>(0, $800sp.html)`\n          <div>\n              <h4 class=\"italic\">${key}</h4>\n              <p class=\"my-3\">\n                <json-viewer id=\"json${index}\">\n                ${JSON.stringify(value)}\n                </json-viewer>\n              </p>\n            </div>\n        `)}\n        </div>\n        </div>\n    </div>\n  </div>   `;\n    }\n}\nwindow.customElements.define('lg4j-result', $c06cac3eedeb74d1$export$c5542a7edb16317);\n\n\n//# sourceMappingURL=webui.54d965a9.js.map\n","import TWStyles from './twlit.js';\n\nimport { html, css, LitElement,nothing } from 'lit';\nimport { Stack } from './stack.js';\nimport { debug } from './debug.js';\n\n\nconst _DBG = debug( { on: true, topic: 'LG4JResult' } )\n\n/**\n * @file\n * @typedef {import('./types.js').ResultData} ResultData * \n */\n\n// @ts-ignore\nexport class LG4JResultElement extends LitElement {\n\n  static styles = [TWStyles, css`\n  json-viewer {\n    --font-size: .8rem;\n  }`]\n\n  static properties = {}\n\n  /**\n   * @type {Map<string, Stack<ResultData[]>>}\n   */\n  threadMap = new Map()\n  \n  /** \n   * @type {string|undefined}\n   */\n  #selectedThread;\n\n  get selectedTab() {\n    return this.#selectedThread\n  }\n\n  set selectedTab( thread ) {\n    this.#selectedThread = thread\n\n    this.dispatchEvent( new CustomEvent( 'thread-updated', { \n      detail: thread ,\n      bubbles: true,\n      composed: true,\n      cancelable: true\n    }));\n\n  }\n\n  constructor() {\n    super()\n  }\n  \n  connectedCallback() {\n    super.connectedCallback();\n\n    // @ts-ignore\n    this.addEventListener( 'result', this.#onResult )\n    // @ts-ignore\n    this.addEventListener( 'init-threads', this.#onInitThreads )\n    // @ts-ignore\n    this.addEventListener( 'node-updated', this.#onNodeUpdated )\n    // @ts-ignore\n    this.addEventListener( 'state-updated', this.#onStateUpdated );\n\n  }\n\n  disconnectedCallback() {\n    super.disconnectedCallback()\n\n    // @ts-ignore\n    this.removeEventListener( 'state-updated', this.#onStateUpdated );\n    // @ts-ignore\n    this.removeEventListener( 'result',  this.#onResult )\n    // @ts-ignore\n    this.removeEventListener( 'init-threads',  this.#onInitThreads )\n    // @ts-ignore\n    this.removeEventListener( 'node-updated', this.#onNodeUpdated )\n  }\n\n  /**\n   * Event handler for the 'init threads' event.\n   * \n   * @param {CustomEvent} e - The event object containing the result data.\n   * \n   */\n  #onInitThreads = (e) => {\n    const { detail: threads  = [] } = e \n\n    _DBG( 'threads', threads )\n\n    this.threadMap = new Map( threads.map( ( /** @type {[string, ResultData[]]} */ [ thread, results ] ) => \n      [ thread, new Stack( results ) ]\n    ))\n    \n    if( threads && threads.length > 0 ) {\n      this.selectedTab = threads[0][0]\n      this.requestUpdate()  \n    }\n  }\n\n  /**\n   * Event handler for the 'result' event.\n   * \n   * @param {CustomEvent} e - The event object containing the result data.\n   * \n   */\n  #onResult = (e) => {\n\n    const [ thread, result ] = e.detail\n    _DBG( \"ON RESULT\", thread, result  )\n    \n    if( !this.threadMap.has( thread ) ) {\n      throw new Error( `result doesn't contain a valid thread! ${thread}` );\n    }\n\n    const stack = this.threadMap.get( thread )\n    if( !stack ) {\n      throw new Error( `thread \"${thread} doesn't contain a valid stack! ` );\n    }\n\n    const results = stack.peek()\n\n    const index = (results) ? results.push( result ) : stack.push( [result] )\n    \n    this.threadMap.set( thread, stack );\n\n    if( result.next ) {\n      this.dispatchEvent( new CustomEvent( 'graph-active', { \n        detail: result.next,\n        bubbles: true,\n        composed: true,\n        cancelable: true\n      }));  \n    }\n    \n    this.requestUpdate()\n    \n    this.updateComplete.then(() => {\n      const id = `#json${index-1}`\n      // @ts-ignore\n      const elems = this.shadowRoot.querySelectorAll(id);\n      _DBG( id, elems );\n      for (const elem of elems) {\n        // @ts-ignore\n        elem.expandAll()\n      }\n    });\n  }\n\n  /**\n   * Event handler select tab.\n   * \n   * @param {Event} event - The event object.\n   * \n   */\n  #onSelectTab( event ) {\n    // @ts-ignore\n    const { id } = event.target\n\n    _DBG( \"onSelectTab\", id )\n\n    this.selectedTab = id\n\n    this.requestUpdate();\n  }\n\n  // @ts-ignore\n  #onNewTab(event) {\n    _DBG( \"NEW TAB\", event)\n\n    const threadId = `Thread-${this.threadMap.size+1}`\n\n    this.threadMap.set( threadId, new Stack() );\n\n    this.selectedTab = threadId\n\n    this.requestUpdate();\n\n  }\n\n  /**\n   * \n   * @param {CustomEvent<ResultData>} e - The event object containing the result data.\n   * \n   */\n  #onNodeUpdated( e ) {\n    _DBG( 'onNodeUpdated', e )\n  }\n\n  /**\n   * \n   * @param {CustomEvent<'start'|'stop'|'interrupted'|'error'>} e \n   */\n  #onStateUpdated( e ) {\n    _DBG( 'onStateUpdated', e )\n    if( e.detail === 'stop' && this.selectedTab ) { \n\n      // add new elemnt into history stack\n      const stack = this.threadMap.get( this.selectedTab )?.push( [] )\n\n    }\n  }\n\n  /** \n   * Renders a result.\n   * @param {ResultData} result - The result data to render.\n   * @returns The template for the result.\n   */\n  // @ts-ignore\n  #renderResult(result, index) {\n\n    return html`\n    <div class=\"collapse collapse-arrow bg-base-200\">\n      <input type=\"radio\" name=\"item-${index}\" checked=\"checked\" />\n      <div class=\"collapse-title text-ml font-bold\">${result.node}</div>\n      <div class=\"collapse-content\">\n        <lg4j-node-output>${JSON.stringify(result).trim()}</log4j-node-output>  \n      </div>\n    </div>\n    `\n  }\n\n  #renderResults() {\n    if( !this.selectedTab ) {\n      return html`<div class=\"alert alert-warning\">No Data</div>`\n    }   \n\n    return this.threadMap.get(this.selectedTab)?.elements\n      .filter( results => results.length > 0 )\n      .map( (results,index ) => \n        html`\n          <div class=\"collapse collapse-plus bg-neutral-500\">\n            <input type=\"radio\" name=\"execution-${ index === 0 ? '0' : '1'}\" checked=\"${ index === 0 ? 'checked' : nothing }\" />\n            <div class=\"collapse-title text-ml font-bold\">${ index === 0 ? 'Last Execution' : `Execution (${index})`}</div>\n            <div class=\"collapse-content\">\n              <table class=\"table table-pin-rows\">\n                <tbody>\n                  ${results.map( (result) => \n                    html`<tr><td>${this.#renderResult(result, index)}</td></tr>`) }\n                </tbody>\n              </table>\n            </div>\n          </div>`)\n\n  }\n  \n\n  #renderTabs() {\n\n    const threads = [ ...this.threadMap.keys() ] \n    return html`\n    ${threads.map( t => html`<a id=\"${t}\" @click=\"${this.#onSelectTab}\" role=\"tab\" class=\"tab ${this.selectedTab===t ? 'tab-active' : ''}\" >${t}</a>`)}\n    `\n  }\n\n  render() {\n  \n    return html`\n      \n      <div class=\"h-full\">\n        <div role=\"tablist\" class=\"tabs tabs-bordered\">\n            ${this.#renderTabs()}\n            <a role=\"tab\" class=\"tab\" @click=\"${this.#onNewTab}\">\n              <svg  xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 20 20\">\n                <circle cx=\"10\" cy=\"10\" r=\"9\" fill=\"none\" stroke=\"white\" stroke-width=\"1.5\"/>\n                <line x1=\"5\" y1=\"10\" x2=\"15\" y2=\"10\" stroke=\"white\" stroke-width=\"1.5\" stroke-linecap=\"round\"/>\n                <line x1=\"10\" y1=\"5\" x2=\"10\" y2=\"15\" stroke=\"white\" stroke-width=\"1.5\" stroke-linecap=\"round\"/>\n              </svg>\n            </a>\n          </div>\n            <div class=\"max-h-[95%] overflow-x-auto bg-slate-500\">\n            ${ this.#renderResults() }\n            </div>\n        </div> \n    `;\n  }\n\n  /** \n   * Renders a result.\n   * @param {ResultData} result - The result data to render.\n   * @returns The template for the result.\n   * @deprecated\n   */\n    // @ts-ignore\n    #renderResultDeprecated(result, index) {\n\n      return html`\n      <div class=\"collapse collapse-arrow bg-base-200\">\n        <input type=\"radio\" name=\"item-1\" checked=\"checked\" />\n        <div class=\"collapse-title text-ml font-bold\">${result.node}</div>\n        <div class=\"collapse-content\">\n        ${Object.entries(result.\n// @ts-ignore\n        state).map(([key, value]) => html`\n            <div>\n                <h4 class=\"italic\">${key}</h4>\n                <p class=\"my-3\">\n                  <json-viewer id=\"json${index}\">\n                    ${JSON.stringify(value)}\n                  </json-viewer>\n                </p>\n              </div>\n          `)}\n        </div>\n      </div>\n      `\n    }\n  \n  // @deprecated\n  // @ts-ignore\n  #renderResultWithCard(result, index) {\n    return html`\n    <div class=\"card bg-neutral text-neutral-content\">\n    <div class=\"card-body\">\n      <h2 class=\"card-title\">${result.node}</h2>\n      <div class=\"collapse collapse-arrow bg-base-200\">\n        <input type=\"radio\" name=\"item-1\" checked=\"checked\" />\n        <div class=\"collapse-content\">\n        ${Object.entries(result.state).map(([key, value]) => html`\n          <div>\n              <h4 class=\"italic\">${key}</h4>\n              <p class=\"my-3\">\n                <json-viewer id=\"json${index}\">\n                ${JSON.stringify(value)}\n                </json-viewer>\n              </p>\n            </div>\n        `)}\n        </div>\n        </div>\n    </div>\n  </div>   `\n  }\n\n}\n\nwindow.customElements.define('lg4j-result', LG4JResultElement);\n","/**\n * Represents a Last-In, First-Out (LIFO) stack.\n * \n * @template T The type of elements held in the stack.\n */\nexport class Stack {\n    /**\n     * The array holding the stack items.\n     * @type {Array<T>}\n     */\n    items;\n  \n    /**\n     * The array holding the stack items.\n     * @param  {Array<T>} items\n     */\n    constructor( items = []) {\n      this.items = items ;\n    }\n  \n    /**\n     * Adds an item to the top of the stack.\n     * @param {T} item The item to add.\n     * @returns {number} The new length of the stack.\n     */\n    push(item) {\n        return this.items.push(item);\n    }\n  \n    /**\n     * Removes and returns the item from the top of the stack.\n     * @returns {T | undefined} The removed item, or undefined if the stack is empty.\n     */\n    pop() {\n      return this.items.pop();\n    }\n  \n    /**\n     * Returns the item at the top of the stack without removing it.\n     * @returns {T | undefined} The top item, or undefined if the stack is empty.\n     */\n    peek() {\n      return this.items.at(-1)\n    }\n  \n    /**\n     * Returns a copy of all elements in the stack as an array,\n     * ordered from top (most recent) to bottom (least recent).\n     * This method does not modify the original stack.\n     * @returns {Array<T>} An array containing all elements, with the most recently added element at index 0.\n     */\n    get elements() {\n      // Create a reversed copy to avoid mutating the internal 'items' array\n      return this.items.toReversed()\n    }\n  \n    /**\n     * Checks if the stack is empty.\n     * @returns {boolean} True if the stack is empty, false otherwise.\n     */\n    isEmpty() {\n      return this.items.length === 0;\n    }\n  \n    /**\n     * Gets the number of items in the stack.\n     * @returns {number} The size of the stack.\n     */\n    get size() {\n      return this.items.length;\n    }\n  \n    /**\n     * Clears all items from the stack.\n     */\n    clear() {\n      this.items = [];\n    }\n  }"],"names":["$parcel$global","globalThis","$parcel$modules","$parcel$inits","parcelRequire","id","exports","init","module","call","err","Error","code","register","$hNeh9","$800sp","$ceb960a0a14a1b97$export$694e0d28c7ffc90c","items","constructor","push","item","pop","peek","at","elements","toReversed","isEmpty","length","size","clear","$c06cac3eedeb74d1$var$_DBG","$8uVid","debug","on","topic","$c06cac3eedeb74d1$export$c5542a7edb16317","LitElement","styles","default","css","properties","threadMap","Map","selectedTab","thread","dispatchEvent","CustomEvent","detail","bubbles","composed","cancelable","connectedCallback","addEventListener","disconnectedCallback","removeEventListener","e","threads","map","results","requestUpdate","result","has","stack","get","index","set","next","updateComplete","then","elems","shadowRoot","querySelectorAll","elem","expandAll","event","target","threadId","html","node","JSON","stringify","trim","filter","nothing","keys","t","render","Object","entries","state","key","value","window","customElements","define"],"version":3,"file":"webui.54d965a9.js.map"}